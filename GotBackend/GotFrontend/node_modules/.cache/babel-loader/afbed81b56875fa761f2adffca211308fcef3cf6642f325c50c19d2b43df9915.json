{"ast":null,"code":"var _jsxFileName = \"/Users/shyamsawant/Desktop/gotfrontend/src/components/FamilyTreeComponent/index.js\";\nimport { Box, Flex } from '@chakra-ui/react';\nimport React from 'react';\nimport { ArcherContainer, ArcherElement } from \"react-archer\";\nimport Queue from \"../../libraries/Queue\";\nimport CardComponent from '../CardComponent';\n\n//root element and following row element styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rootStyle = {\n  margin: \"20px 0px\",\n  display: \"flex\",\n  justifyContent: \"center\"\n};\nconst rowStyle = {\n  margin: \"100px 0\",\n  display: \"flex\",\n  justifyContent: \"space-between\"\n};\nconst boxStyle = {\n  padding: \"10px\",\n  border: \"1px solid black\",\n  display: \"flex\",\n  justifyContent: \"space-between\"\n};\n\n//For every card, creating a childrens target and spouse targetm that the current card should point to\n//the children target will be connected through a dotted red line, and spouse target with blue line\nconst constructTargetObjects = data => {\n  var targetObjects = [];\n  data.children.map((element, i) => targetObjects.push({\n    targetId: element.characterName,\n    targetAnchor: \"top\",\n    sourceAnchor: \"bottom\",\n    style: {\n      strokeDasharray: \"5,5\"\n    }\n  }));\n  data.spouse.map((element, i) => targetObjects.push({\n    targetId: element.characterName,\n    targetAnchor: \"left\",\n    sourceAnchor: \"right\",\n    style: {\n      strokeColor: \"blue\",\n      strokeWidth: 1\n    }\n  }));\n  return targetObjects;\n};\n\n//Construct a object specifying additional details for every node\n//List of key value pairs that to be displayed inside card, after name and favorite\nconst constructRelations = data => {\n  var relations = [];\n  if (data.parents.length > 0) relations.push({\n    key: \"Parents\",\n    value: data.parents.toString()\n  });\n  if (data.siblings.length > 0) relations.push({\n    key: \"Siblings\",\n    value: data.siblings.toString()\n  });\n  if (data.killed.length > 0) relations.push({\n    key: \"Killed\",\n    value: data.killed.toString()\n  });\n  if (data.killedBy.length > 0) relations.push({\n    key: \"Killed by\",\n    value: data.killedBy.toString()\n  });\n  if (data.guardianOf.length > 0) relations.push({\n    key: \"Guardian of\",\n    value: data.guardianOf.toString()\n  });\n  if (data.guardedBy.length > 0) relations.push({\n    key: \"Guarded by\",\n    value: data.guardedBy.toString()\n  });\n  return relations;\n};\nconst constructTree = props => {\n  //Initializing head node with first element in the tree\n  let headNode = props.data;\n\n  //Create a queue, add current head node and its spouse relations\n  //Its assumed that, the node and its spouses will be in same level\n  //and the child nodes and their spouses will follow in next iteration, ie next level\n  let q = new Queue();\n  q.enqueue(headNode);\n  headNode.spouse.map((node, i) => headNode.enqueue(node));\n  q.enqueue(null);\n  var treeTraversed = [];\n  while (!q.isEmpty() && q.peek() != null) {\n    let currentLevelNodes = [];\n    let currentNode = q.dequeue();\n    while (currentNode != null) {\n      let relations = constructRelations(currentNode);\n      currentLevelNodes.push({\n        node: currentNode,\n        mapping: constructTargetObjects(currentNode),\n        relations: relations\n      });\n      currentNode.children.map((node, i) => {\n        q.enqueue(node);\n        node.spouse.map((spouseNode, i) => q.enqueue(spouseNode));\n      });\n      currentNode = q.dequeue();\n    }\n    q.enqueue(null);\n    treeTraversed.push(currentLevelNodes);\n  }\n  return /*#__PURE__*/_jsxDEV(ArcherContainer, {\n    strokeColor: \"red\",\n    children: treeTraversed.map((levelTraversed, i) => i == 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: rootStyle,\n      children: levelTraversed.map((nodeObject, i) => /*#__PURE__*/_jsxDEV(ArcherElement, {\n        id: nodeObject.node.characterName,\n        relations: nodeObject.mapping,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: boxStyle,\n          children: nodeObject.node.characterName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 29\n        }, this)\n      }, nodeObject.node.characterName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: rowStyle,\n      children: levelTraversed.map((nodeObject, i) => /*#__PURE__*/_jsxDEV(ArcherElement, {\n        id: nodeObject.node.characterName,\n        relations: nodeObject.mapping,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          children: [\" \", /*#__PURE__*/_jsxDEV(CardComponent, {\n            element: nodeObject,\n            fetchFamilyTreeData: props.fetchFamilyTreeData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 35\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 29\n        }, this)\n      }, nodeObject.node.characterName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\nfunction FamilyTreeComponent(props) {\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    minWidth: \"max-content\",\n    alignItems: \"center\",\n    children: constructTree(props)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_c = FamilyTreeComponent;\nexport default FamilyTreeComponent;\nvar _c;\n$RefreshReg$(_c, \"FamilyTreeComponent\");","map":{"version":3,"names":["Box","Flex","React","ArcherContainer","ArcherElement","Queue","CardComponent","jsxDEV","_jsxDEV","rootStyle","margin","display","justifyContent","rowStyle","boxStyle","padding","border","constructTargetObjects","data","targetObjects","children","map","element","i","push","targetId","characterName","targetAnchor","sourceAnchor","style","strokeDasharray","spouse","strokeColor","strokeWidth","constructRelations","relations","parents","length","key","value","toString","siblings","killed","killedBy","guardianOf","guardedBy","constructTree","props","headNode","q","enqueue","node","treeTraversed","isEmpty","peek","currentLevelNodes","currentNode","dequeue","mapping","spouseNode","levelTraversed","nodeObject","id","fileName","_jsxFileName","lineNumber","columnNumber","fetchFamilyTreeData","FamilyTreeComponent","minWidth","alignItems","_c","$RefreshReg$"],"sources":["/Users/shyamsawant/Desktop/gotfrontend/src/components/FamilyTreeComponent/index.js"],"sourcesContent":["import { Box, Flex } from '@chakra-ui/react'\nimport React from 'react'\nimport { ArcherContainer, ArcherElement } from \"react-archer\";\nimport Queue from \"../../libraries/Queue\"\nimport CardComponent from '../CardComponent'\n\n\n//root element and following row element styles\nconst rootStyle = { margin: \"20px 0px\", display: \"flex\", justifyContent: \"center\" };\nconst rowStyle = {\n    margin: \"100px 0\",\n    display: \"flex\",\n    justifyContent: \"space-between\"\n};\nconst boxStyle = { padding: \"10px\", border: \"1px solid black\", display: \"flex\", justifyContent: \"space-between\" };\n\n\n//For every card, creating a childrens target and spouse targetm that the current card should point to\n//the children target will be connected through a dotted red line, and spouse target with blue line\nconst constructTargetObjects = (data) => {\n    var targetObjects = [];\n    data.children.map((element, i) => targetObjects.push({ targetId : element.characterName, targetAnchor: \"top\", sourceAnchor: \"bottom\", style: { strokeDasharray: \"5,5\" }}))\n    data.spouse.map((element, i) => targetObjects.push({ targetId : element.characterName, targetAnchor: \"left\", sourceAnchor: \"right\", style: { strokeColor: \"blue\", strokeWidth: 1 }}))\n    \n    return targetObjects;\n}\n\n//Construct a object specifying additional details for every node\n//List of key value pairs that to be displayed inside card, after name and favorite\nconst constructRelations = (data) => {\n    var relations = [];\n    if(data.parents.length>0) relations.push({key: \"Parents\", value: data.parents.toString()})\n    if(data.siblings.length>0) relations.push({key: \"Siblings\", value: data.siblings.toString()})\n    if(data.killed.length>0) relations.push({key: \"Killed\", value: data.killed.toString()})\n    if(data.killedBy.length>0) relations.push({key: \"Killed by\", value: data.killedBy.toString()})\n    if(data.guardianOf.length>0) relations.push({key: \"Guardian of\", value: data.guardianOf.toString()})\n    if(data.guardedBy.length>0) relations.push({key: \"Guarded by\", value: data.guardedBy.toString()})\n\n    return relations;\n}\n\n\nconst constructTree = (props) => {\n\n    //Initializing head node with first element in the tree\n    let headNode = props.data\n\n    //Create a queue, add current head node and its spouse relations\n    //Its assumed that, the node and its spouses will be in same level\n    //and the child nodes and their spouses will follow in next iteration, ie next level\n    let q = new Queue();\n    q.enqueue(headNode)\n    headNode.spouse.map((node, i) => headNode.enqueue(node));\n    q.enqueue(null);\n\n    var treeTraversed = []\n\n    while(!q.isEmpty() && q.peek()!=null){\n\n        let currentLevelNodes = []\n        let currentNode = q.dequeue();\n\n        while(currentNode!=null){\n\n            let relations = constructRelations(currentNode)\n            currentLevelNodes.push({ node: currentNode, mapping: constructTargetObjects(currentNode), relations: relations})\n\n            currentNode.children.map((node, i) => {\n                q.enqueue(node)\n                node.spouse.map((spouseNode, i) => q.enqueue(spouseNode))\n            })\n\n            currentNode = q.dequeue();\n\n        }\n\n        q.enqueue(null);\n        treeTraversed.push(currentLevelNodes)\n        \n\n    }\n\n    return (\n        <ArcherContainer strokeColor=\"red\">\n            \n            {\n\n                treeTraversed.map((levelTraversed, i) => (\n\n                    i==0 ? \n\n                    <div style={rootStyle}>\n                    {levelTraversed.map((nodeObject, i)=> (\n                        <ArcherElement\n                        id={nodeObject.node.characterName}\n                        key={nodeObject.node.characterName}\n                        relations={nodeObject.mapping}\n                        \n                        >\n                            <div style={boxStyle}>{nodeObject.node.characterName}</div>\n                        </ArcherElement>\n                    ))}\n                    </div>\n\n                    : \n\n                    <div style={rowStyle}>\n                    {levelTraversed.map((nodeObject, i)=> (\n                        <ArcherElement\n                        id={nodeObject.node.characterName}\n                        key={nodeObject.node.characterName}\n                        relations={nodeObject.mapping}\n                        \n                        >\n                            {/*<div style={boxStyle}>{nodeObject.node.characterName} <img src={filledHeart} alt=\"hollowHeart\" height={20} width={20} style={{marginLeft : 10}}/></div>*/}\n                            <Box> <CardComponent element={nodeObject} fetchFamilyTreeData={props.fetchFamilyTreeData} /> </Box>\n                        </ArcherElement>\n                    ))}\n                    </div>\n                ))\n            }\n\n        </ArcherContainer>\n    )\n\n}\n\n\nfunction FamilyTreeComponent(props) {\n\n  return (\n    <Flex minWidth='max-content' alignItems='center'>\n                {constructTree(props)}\n    </Flex>\n  )\n}\n\nexport default FamilyTreeComponent"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}