{"ast":null,"code":"var _jsxFileName = \"/Users/shyamsawant/Desktop/gotfrontend/src/components/ArrowDomComponent/index.js\";\nimport { ArcherContainer, ArcherElement } from \"react-archer\";\nimport data from \"../FamilyTreeComponent/response.json\";\nimport Queue from \"../../libraries/Queue\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rootStyle = {\n  margin: \"20px 0px\",\n  display: \"flex\",\n  justifyContent: \"center\"\n};\nconst rowStyle = {\n  margin: \"200px 0\",\n  display: \"flex\",\n  justifyContent: \"space-between\"\n};\nconst boxStyle = {\n  padding: \"10px\",\n  border: \"1px solid black\"\n};\nconst constructTargetObjects = data => {\n  var targetObjects = [];\n  data.children.map((element, i) => targetObjects.push({\n    targetId: element.characterName,\n    targetAnchor: \"top\",\n    sourceAnchor: \"bottom\",\n    style: {\n      strokeDasharray: \"5,5\"\n    }\n  }));\n  data.spouse.map((element, i) => targetObjects.push({\n    targetId: element.characterName,\n    targetAnchor: \"left\",\n    sourceAnchor: \"right\",\n    style: {\n      strokeColor: \"blue\",\n      strokeWidth: 1\n    }\n  }));\n  return targetObjects;\n};\n\n/* const constructTree = (data) => {\n\n    return(\n        <div>\n            <div key={data.characterName} style={rootStyle}>\n\n                    <ArcherElement\n                        id={data.characterName}\n                        key={data.characterName}\n                        relations={constructTargetObjects(data)}\n                        \n                    >\n                        <div style={boxStyle}>{data.characterName}</div>\n                    </ArcherElement>\n                    {\n                        data.spouse.map((element, i) => (\n                            <ArcherElement\n                                id={data.characterName}\n                                key={data.characterName}\n                                relations={constructTargetObjects(element)}\n                                \n                            >\n                                <div style={boxStyle}>{element.characterName}</div>\n                            </ArcherElement>\n                            //constructTree(element)\n                        ))\n                    }\n                \n            </div>\n            <div style={rowStyle}>\n\n                {\n                    data.children.map((element, i) => (\n                        constructTree(element)\n                    ))\n                }\n\n                {\n                    data.spouse.map((element, i) => (\n                        element.children.map((child, i) => constructTree(child))\n                    ))\n                }\n            </div>\n        </div>\n    )\n\n}  */\n\nconst constructTree = headNode => {\n  let q = new Queue();\n  var treeTraversed = [];\n  q.enqueue(headNode);\n  headNode.spouse.map((node, i) => headNode.enqueue(node));\n  q.enqueue(null);\n  var level = 1;\n  while (!q.isEmpty() && q.peek() != null) {\n    let currentLevelNodes = [];\n    let currentNode = q.dequeue();\n    while (currentNode != null) {\n      currentLevelNodes.push({\n        node: currentNode,\n        mapping: constructTargetObjects(currentNode)\n      });\n      currentNode.children.map((node, i) => {\n        q.enqueue(node);\n        node.spouse.map((spouseNode, i) => q.enqueue(spouseNode));\n      });\n      currentNode = q.dequeue();\n    }\n    q.enqueue(null);\n    level = level + 1;\n    treeTraversed.push(currentLevelNodes);\n  }\n  return /*#__PURE__*/_jsxDEV(ArcherContainer, {\n    strokeColor: \"red\",\n    children: treeTraversed.map((levelTraversed, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: rootStyle,\n      children: levelTraversed.map((nodeObject, i) => /*#__PURE__*/_jsxDEV(ArcherElement, {\n        id: nodeObject.node.characterName,\n        relations: nodeObject.mapping,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: boxStyle,\n          children: nodeObject.node.characterName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 29\n        }, this)\n      }, nodeObject.node.characterName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"500px\",\n      margin: \"50px\",\n      width: \"5000px\"\n    },\n    children: constructTree(data)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ArcherContainer","ArcherElement","data","Queue","jsxDEV","_jsxDEV","rootStyle","margin","display","justifyContent","rowStyle","boxStyle","padding","border","constructTargetObjects","targetObjects","children","map","element","i","push","targetId","characterName","targetAnchor","sourceAnchor","style","strokeDasharray","spouse","strokeColor","strokeWidth","constructTree","headNode","q","treeTraversed","enqueue","node","level","isEmpty","peek","currentLevelNodes","currentNode","dequeue","mapping","spouseNode","levelTraversed","nodeObject","id","relations","fileName","_jsxFileName","lineNumber","columnNumber","App","height","width","_c","$RefreshReg$"],"sources":["/Users/shyamsawant/Desktop/gotfrontend/src/components/ArrowDomComponent/index.js"],"sourcesContent":["import { ArcherContainer, ArcherElement } from \"react-archer\";\nimport data from \"../FamilyTreeComponent/response.json\";\nimport Queue from \"../../libraries/Queue\"\n\nconst rootStyle = { margin: \"20px 0px\", display: \"flex\", justifyContent: \"center\" };\nconst rowStyle = {\n    margin: \"200px 0\",\n    display: \"flex\",\n    justifyContent: \"space-between\"\n};\n\nconst boxStyle = { padding: \"10px\", border: \"1px solid black\" };\n\nconst constructTargetObjects = (data) => {\n    var targetObjects = [];\n    data.children.map((element, i) => targetObjects.push({ targetId : element.characterName, targetAnchor: \"top\", sourceAnchor: \"bottom\", style: { strokeDasharray: \"5,5\" }}))\n    data.spouse.map((element, i) => targetObjects.push({ targetId : element.characterName, targetAnchor: \"left\", sourceAnchor: \"right\", style: { strokeColor: \"blue\", strokeWidth: 1 }}))\n    \n    return targetObjects;\n} \n\n/* const constructTree = (data) => {\n\n    return(\n        <div>\n            <div key={data.characterName} style={rootStyle}>\n\n                    <ArcherElement\n                        id={data.characterName}\n                        key={data.characterName}\n                        relations={constructTargetObjects(data)}\n                        \n                    >\n                        <div style={boxStyle}>{data.characterName}</div>\n                    </ArcherElement>\n                    {\n                        data.spouse.map((element, i) => (\n                            <ArcherElement\n                                id={data.characterName}\n                                key={data.characterName}\n                                relations={constructTargetObjects(element)}\n                                \n                            >\n                                <div style={boxStyle}>{element.characterName}</div>\n                            </ArcherElement>\n                            //constructTree(element)\n                        ))\n                    }\n                \n            </div>\n            <div style={rowStyle}>\n\n                {\n                    data.children.map((element, i) => (\n                        constructTree(element)\n                    ))\n                }\n\n                {\n                    data.spouse.map((element, i) => (\n                        element.children.map((child, i) => constructTree(child))\n                    ))\n                }\n            </div>\n        </div>\n    )\n\n}  */\n\n\nconst constructTree = (headNode) => {\n\n    let q = new Queue();\n\n    var treeTraversed = []\n    q.enqueue(headNode)\n    headNode.spouse.map((node, i) => headNode.enqueue(node));\n    q.enqueue(null);\n    var level = 1;\n    while(!q.isEmpty() && q.peek()!=null){\n\n        let currentLevelNodes = []\n        let currentNode = q.dequeue();\n\n        while(currentNode!=null){\n\n            currentLevelNodes.push({ node: currentNode, mapping: constructTargetObjects(currentNode)})\n\n            currentNode.children.map((node, i) => {\n                q.enqueue(node)\n                node.spouse.map((spouseNode, i) => q.enqueue(spouseNode))\n            })\n\n            currentNode = q.dequeue();\n\n        }\n\n        q.enqueue(null);\n        level = level+1;\n        treeTraversed.push(currentLevelNodes)\n        \n\n    }\n\n    return (\n        <ArcherContainer strokeColor=\"red\">\n            \n            {\n                treeTraversed.map((levelTraversed, i) => (\n                    <div style={rootStyle}>\n                    {levelTraversed.map((nodeObject, i)=> (\n                        <ArcherElement\n                        id={nodeObject.node.characterName}\n                        key={nodeObject.node.characterName}\n                        relations={nodeObject.mapping}\n                        \n                        >\n                            <div style={boxStyle}>{nodeObject.node.characterName}</div>\n                        </ArcherElement>\n                    ))}\n                    </div>\n                ))\n            }\n\n        </ArcherContainer>\n    )\n\n}\n\n\nconst App = () => {\n    return (\n        <div style={{ height: \"500px\", margin: \"50px\", width: \"5000px\" }}>\n            \n               {/*  <div style={rootStyle}>\n                    <ArcherElement\n                        id=\"root\"\n                        relations={[\n                            {\n                                targetId: \"element2\",\n                                targetAnchor: \"top\",\n                                sourceAnchor: \"bottom\",\n                                style: { strokeDasharray: \"5,5\" },\n                            },\n                        ]}\n                    >\n                        <div style={boxStyle}>Root</div>\n                    </ArcherElement>\n                </div>\n                <div style={rowStyle}>\n                    <ArcherElement\n                        id=\"element2\"\n                        relations={[\n                            {\n                                targetId: \"element3\",\n                                targetAnchor: \"left\",\n                                sourceAnchor: \"right\",\n                                style: { strokeColor: \"blue\", strokeWidth: 1 },\n                                label: <div style={{ marginTop: \"-20px\" }}>Arrow 2</div>,\n                            },\n                        ]}\n                    >\n                        <div style={boxStyle}>Element 2</div>\n                    </ArcherElement>\n                    <ArcherElement id=\"element3\">\n                        <div style={boxStyle}>Element 3</div>\n                    </ArcherElement>\n\n                    <ArcherElement\n                        id=\"element4\"\n                        relations={[\n                            {\n                                targetId: \"root\",\n                                targetAnchor: \"right\",\n                                sourceAnchor: \"left\",\n                                label: \"Arrow 3\",\n                            },\n                        ]}\n                    >\n                        <div style={boxStyle}>Element 4</div>\n                    </ArcherElement>\n                </div> */}\n                {constructTree(data)}\n        </div>\n    );\n};\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}